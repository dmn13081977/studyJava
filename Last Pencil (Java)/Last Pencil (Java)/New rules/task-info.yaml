type: edu
files:
  - name: src/lastpencil/Main.java
    visible: true
    text: |
      package lastpencil;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello World!");
      
          }
      }
    learner_created: false
  - name: test/LastPencilTest.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      
      
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.util.Arrays;
      import java.util.List;
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      
      @SuppressWarnings("deprecation")
      public class LastPencilTest extends StageTest<String> {
          public LastPencilTest() {
      
              test_data = new Object[][]{
                      {5, 1},
                      {20, 1},
                      {300, 1},
                      {5, 2},
                      {20, 2},
                      {300, 2}
              };
          }
      
          @DynamicTest
          CheckResult checkOutput() {
              TestedProgram main = new TestedProgram();
              String output = main.start().toLowerCase();
              String[] lines = output.strip().split("\\n");
      //Checking the correct solution task "How many pencils?"
      //        if (lines.length != 1 || !Pattern.matches("^(how many pencils)\\??:?$|^(how many pencils)[a-zA-Z\\s]*:?\\??$", lines[0])){  - more freedom, but maybe no correct
              if (lines.length != 1 || !Pattern.matches("^(how many pencils would you like to use)\\??:?$", lines[0])) {
                  return CheckResult.wrong("When the game starts, it should output only one line asking the user about the " +
                          "amount of pencils they would like to use with the \"How many pencils would you like to use\" string.");
              }
              String output2 = main.execute("1").replaceAll(" ", "");
      
              //regex
              String whoWillBeRegex = "^(whowillbethefirst).*";
              String playerChecking = ".*\\([a-zA-Z_0-9]+,[a-zA-Z_0-9]+\\):?";
      
              if (output2.split("\\n").length != 1) {//Checking \n lines
                  return CheckResult.wrong("When the user replies with the amount of pencils, the game should print 1 non-empty "
                          + "line asking who will be the first player.\n"
                          + output2.split("\\n").length + " lines were found in the output.");
              }
              output2 = output2.toLowerCase().strip();
      
              if (!Pattern.matches(whoWillBeRegex, output2)) {//Checking a task "Who will be the first"
                  return CheckResult.wrong("Discrepancy with the task, pay attention to the line " +
                          "\"Who will be the first\"");
              }
              if (!Pattern.matches(playerChecking, output2)) {//Checking a task "(Name1, Name2)"
                  return CheckResult.wrong("Discrepancy with the task, output example" +
                          " \"Who will be the first (Name1, Name2):\"");
              }
              return CheckResult.correct();
          }
      
          Object[][] test_data;
      
          @DynamicTest(data = "test_data")
          CheckResult testGame(int amount, int first) {
              TestedProgram main = new TestedProgram();
              main.start();
              String output2 = main.execute(String.valueOf(amount)).replace(" ", "");
      
              String leftName = output2.substring(output2.lastIndexOf('(') + 1, output2.lastIndexOf(','));
              String rightName = output2.substring(output2.lastIndexOf(',') + 1, output2.lastIndexOf(')'));
      
              String firstName;
              if (first == 1) {
                  firstName = leftName;
              } else {
                  firstName = rightName;
              }
              String output3 = main.execute(firstName).toLowerCase();
      //Creates an array for checking "\n"
              String[] lines = output3.strip().split("\n");
      //Creates a list for checking empty lines
              List<String> linesNonEmpty = Arrays.stream(lines).filter(s -> s.length() != 0).toList();
      //Checking player name
              if (leftName.equals(rightName)) {
                  return CheckResult.wrong("The names of the players must be different," +
                          " lines were found in the output: Name1 - \""
                          + leftName + "\" Name2 - \"" + rightName + "\".");
              }
      //Checking the number of output lines
              if (linesNonEmpty.size() != 2) { //24.04 Added more informativeness
                  return CheckResult.wrong("When the player provides the initial game conditions" +
                          ", your program should print 2 non-empty lines:\n"
                          + "one with with vertical bar symbols representing the number of pencils, " +
                          "the other with the \"" + leftName + "\"(if " + rightName + ") " +
                          "\"is going first\" string.\n"
                          + linesNonEmpty.size() + " lines were found in the output.");
              }
      //Create list lines containing | for testing
              List<String> checkPencils = Arrays.stream(lines).filter(s -> s.contains("|")).toList();
              if (checkPencils.size() == 0) {
                  return CheckResult.wrong("When the player provides the initial game conditions" +
                          ", your program should print one line with several vertical bar " +
                          "symbols ('|') representing pencils.");
              }
      // Checking a string for more than 1 string with |
              if (checkPencils.size() > 1) {
                  return CheckResult.wrong("When the player provides the initial game conditions" +
                          ", your program should print only one line with several vertical bar " +
                          "symbols ('|') representing pencils.");
              }
      // distinct() makes it possible to get the number of non-unique elements, thus getting 2, the test fails
              if (checkPencils.get(0).chars().distinct().count() != 1) {
                  return CheckResult.wrong("The line with pencils should not contain any symbols other than the '|' symbol.");
              }
      //Checking for compliance with the amount transferred by the player | Characters
              if (checkPencils.get(0).length() != amount) {
                  return CheckResult.wrong("The line with pencils should contain as many '|' symbols as the player provided.");
              }
              //Validation variable for compliance with the selected player
              boolean checkTurn = false;
              for (String s : lines) {
                  if (s.toLowerCase().contains(firstName.toLowerCase()) && s.contains("first")) {
                      checkTurn = true;
                      break;
                  }
              }
      //Checking for compliance with the selected player
              if (!checkTurn) {
                  return CheckResult.wrong("There should be a line in the output that contains the \""
                          + firstName + " is going first!\"" +
                          " string if " + firstName + " is the first player.");
              }
      //Checking, if conditions print, but the program then sends a request
              if (!main.isFinished()) {
                  return CheckResult.wrong("Your program should not request anything after initial conditions have been printed.");
              }
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/lastpencil/BotPlayer.java
    visible: true
    text: |+
      package lastpencil;
      
      import java.util.concurrent.ThreadLocalRandom;
      
      
      public class BotPlayer extends Player {
      
          public BotPlayer(String name) {
              super(name);
          }
      
          @Override
          public int takePencils(int currentPencils) {
              int pencilsTaken;
              if (currentPencils == 1) {
                  pencilsTaken = 1;
              } else {
                  int strategy;
                  for (strategy = 0; strategy <= 3; strategy++) {
                      if ((currentPencils + strategy - 1) % 4 == 0) {
                          break;
                      }
                  }
                  if (strategy == 0) {
                      pencilsTaken = ThreadLocalRandom.current().nextInt(1, 4);
                  } else {
                      pencilsTaken = 3 - (strategy - 1);
                  }
              }
              System.out.println(pencilsTaken);
              return currentPencils - pencilsTaken;
          }
      }
    
    learner_created: true
  - name: src/lastpencil/HumanPlayer.java
    visible: true
    text: |-
      package lastpencil;
      
      import java.util.Scanner;
      
      
      public class HumanPlayer extends Player{
          private static final String VALUES_REGEX = "^[123]$";
          private final Scanner scanner;
      
          public HumanPlayer(String name, Scanner scanner) {
              super(name);
              this.scanner = scanner;
          }
      
          @Override
          public int takePencils(int currentPencils) {
              while (true) {
                  String input = scanner.nextLine();
                  if (input.matches(VALUES_REGEX)) {
                      int pencilsLeft = currentPencils - Integer.parseInt(input);
                      if (pencilsLeft >= 0) {
                          return pencilsLeft;
                      } else {
                          System.out.println("Too many pencils were taken");
                      }
                  } else {
                      System.out.println("Possible values: '1', '2' or '3'");
                  }
              }
          }
      }
    learner_created: true
  - name: src/lastpencil/PencilGame.java
    visible: true
    text: |
      package lastpencil;
      
      import java.text.MessageFormat;
      import java.util.Scanner;
      
      public class PencilGame {
      
          private int pencils;
          private final Player playerYou, playerComputer;
          private Player currentPlayer;
          private final Scanner scanner;
          private static final String NUMERIC_REGEX = "^\\d+$";
          private static final String NAMES_REGEX_FORMAT = "^(?:{0}|{1})$";
      
          public PencilGame() {
              scanner  = new Scanner(System.in);
              playerYou = new HumanPlayer("You", scanner);
              playerComputer = new BotPlayer("Computer");
          }
      
          public void play(){
              askNumberOfPencils();
              askTurnOrder();
              handlePlayersTurns();
              printWinner();
          }
      
          private void askNumberOfPencils() {
              System.out.println("How many pencils would you like to use:");
              while (true) {
                  String input = scanner.nextLine();
                  if (input.matches(NUMERIC_REGEX)) {
                      int inputNumber = Integer.parseInt(input);
                      if (inputNumber > 0) {
                          pencils = inputNumber;
                          break;
                      } else {
                          System.out.println("The number of pencils should be positive");
                      }
                  } else {
                      System.out.println("The number of pencils should be numeric");
                  }
              }
          }
      
          private void askTurnOrder() {
              System.out.println(MessageFormat.format("Who will be the first ({0}, {1}):", playerYou.getName(), playerComputer.getName()));
              String namesRegex = MessageFormat.format(NAMES_REGEX_FORMAT, playerYou.getName(), playerComputer.getName());
              while (true) {
                  String input = scanner.nextLine();
                  if (input.matches(namesRegex)) {
                      currentPlayer = playerYou.getName().equals(input) ? playerYou : playerComputer;
                      break;
                  } else {
                      System.out.println(MessageFormat.format("Choose between ''{0}'' and ''{1}''", playerYou.getName(), playerComputer.getName()));
                  }
              }
          }
      
          private void handlePlayersTurns() {
              while (pencils > 0) {
                  System.out.println("|".repeat(pencils));
                  System.out.println(MessageFormat.format("{0}'r turn!",currentPlayer.getName()));
                  pencils = currentPlayer.takePencils(pencils);
                  currentPlayer = currentPlayer.equals(playerYou) ? playerComputer : playerYou;
              }
          }
      
          private void printWinner() {
              System.out.println(MessageFormat.format("{0} won!", currentPlayer.getName()));
          }
      }
    learner_created: true
  - name: src/lastpencil/Player.java
    visible: true
    text: |-
      package lastpencil;
      
      public abstract class Player {
      
          protected final String name;
      
          public Player(String name) {
              this.name = name;
          }
      
          public abstract int takePencils(int currentPencils);
      
          public String getName() {
              return name;
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/27999#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 16 Nov 2023 12:20:56 UTC"
record: 2
